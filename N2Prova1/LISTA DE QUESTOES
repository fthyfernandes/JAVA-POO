

1.     Classe com Atributos e MÃ©todos:    
   Crie uma classe `Pessoa` com atributos como nome, idade e mÃ©todos para exibir informaÃ§Ãµes da pessoa.

2.     MÃ©todos EstÃ¡ticos:    
   Crie uma classe `OperacoesMatematicas` com mÃ©todos estÃ¡ticos para realizar operaÃ§Ãµes matemÃ¡ticas, como soma, subtraÃ§Ã£o, multiplicaÃ§Ã£o e divisÃ£o.

3.     Construtor:    
   Crie uma classe `Carro` com um construtor que inicializa a marca, modelo e ano do carro.

4.     Relacionamento entre Classes:    
   Crie uma classe `Biblioteca` que contÃ©m uma lista de livros representados por outra classe `Livro`. Implemente mÃ©todos para adicionar, remover e listar os livros na biblioteca.

5.     Modificadores de Acesso (Visibilidade):    
   Crie uma classe com membros privados e forneÃ§a mÃ©todos pÃºblicos para acessar e modificar esses membros.

6.     Import:    
   Crie uma classe em um pacote e importe-a em outra classe.

7.     Encapsulamento - Getters e Setters:    
   Crie uma classe `Aluno` com atributos privados, como nome e idade, e forneÃ§a mÃ©todos getters e setters para acessÃ¡-los.

8.     Sobrecarga de MÃ©todos:    
   Crie uma classe `Calculadora` com mÃ©todos sobrecarregados para realizar operaÃ§Ãµes matemÃ¡ticas com diferentes tipos de argumentos (int, double, etc.).

9.     HeranÃ§a:    
   Crie uma classe `Forma` e, em seguida, crie classes derivadas, como `Circulo` e `Retangulo`, que herdam da classe `Forma`.

*10.     Polimorfismo:    
    Crie um mÃ©todo em `Forma` que pode ser sobrescrito nas classes derivadas para calcular a Ã¡rea da forma.

*11.     Classe Abstrata:    
    Transforme a classe `Forma` em uma classe abstrata e forneÃ§a mÃ©todos abstratos para calcular a Ã¡rea e o perÃ­metro.

*12.     Interfaces:    
    Crie uma interface `Desenhavel` e faÃ§a com que as classes `Circulo` e `Retangulo` a implementem.

13.     ComposiÃ§Ã£o:    
    Crie uma classe `Endereco` com atributos como rua, cidade e estado, e use-a como parte de outra classe, como `Pessoa`.

14.     EnumeraÃ§Ãµes:    
    Crie uma enumeraÃ§Ã£o `DiasDaSemana` com os dias da semana e use-a em um programa que mostra o dia atual.

*15.     RecursÃ£o:    
    Escreva um programa recursivo para calcular o fatorial de um nÃºmero.

*16.     ColeÃ§Ãµes:    
    Crie uma lista de objetos `Produto` com atributos como nome e preÃ§o, e implemente mÃ©todos para adicionar, remover e listar os produtos.

17. 	Suponha que vocÃª tenha uma classe chamada Pessoa com um construtor que aceita dois parÃ¢metros: nome e idade. VocÃª deseja criar uma subclasse chamada Aluno que herda de Pessoa. No construtor da classe Aluno, como vocÃª usaria super() para chamar o construtor da classe pai Pessoa e inicializar os atributos herdados?

18.	O que acontece se vocÃª nÃ£o usar a palavra-chave super() no construtor de uma classe filha? A classe pai ainda Ã© inicializada?
